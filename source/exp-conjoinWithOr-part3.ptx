<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="ConjoinWithOrPart3" xmlns:xi="http://www.w3.org/2001/XInclude">


  <title>Rule 1) Conjoining Conditions </title>
  <p>
    Continue watching the video to learn when to conjoin conditions with || and answer the following questions.
  </p>
  <figure>
    <caption>Conjoining conditions with <c>||</c> part 3</caption>
    <video xml:id="conjoinWithOr3" youtube="hgVU3kO3hQw" width="90%" margins="5% 5%" preview="conjoinWithOr-part3"/>
  </figure>

 
 
 
 
<activity label="exp-conjoinWithOr-fillinGuessGame">
  <statement>
    <p>
     Consider the following two functions (guessGame1 and guessGame2). For which input(s) these code blocks show different behavior?  
    </p>
    <program language="java">
      <input>
      
public static void guessGame1(int number) { 
   if (number % 4 == 0) {
      System.out.println("Good guess!");
   }  
   if (number % 7 == 0) {
      System.out.println("Good guess!");
   } 
}
      </input>  
    </program>
  </statement>
  
 
 <statement>
    <program language="java">
      <input>
      
public static void guessGame2(int number) { 
   if (number % 4 == 0 || number % 7 == 0) {
      System.out.println("Good guess!");
   } 
}
      </input>  
    </program>
  </statement>
 
 
 
 
  
 <choices>
    <choice correct="yes">
      <statement> 
       28 
      </statement>
      <feedback>
        <p>
            Correct! guessGame1(28) prints "Good guess" twice but guessGame2(28) prints "Good guess" only once! 
        </p>
      </feedback>
    </choice>
    
    <choice correct="no">
      <statement>
        16 
      </statement>
      <feedback>
		Not Correct! Both guessGame1(16) and guessGame2(16) print "Good guess" once. 
      </feedback>
    </choice>
    
    <choice correct="yes">
      <statement>
        56
      </statement>
      <feedback>
       Correct! guessGame1(56) prints "Good guess" twice but guessGame2(56) prints "Good guess" only once. 
      </feedback>
    </choice>
    
    
    <choice correct="no">
      <statement>
        23
      </statement>
      <feedback>
    Not Correct! Neither guessGame1(23) nor guessGame2(23) prints anything. So for this input both functions have the same bahavior.  
      </feedback>
    </choice>
    </choices>

</activity>


 <activity label="video-conjoinWithOr3" >
 <statement>
      <p>
       Which of the following options summarize the main points in the video? 
     </p>


  	<p>
      Select all that apply. 
    </p> 
  </statement>


  <choices>
    <choice correct="yes">
      <statement> 
        We can conjoin the conditions of sequential <c>if</c> statements with the same body that includes return statements using <c>||</c>.
      </statement>
      <feedback>

             Correct! If the body of <c>if</c> statements involve <c>return</c> statements, regardless of whether conditions are exclusive or not, we can conjoin conditions.  

      </feedback>
    </choice>
    
     <choice correct="yes">
      <statement> 
               The functionality and execution of sequential <c>if</c> statements with a body that involves return statements is the same as an <c>if-else if </c>structure.
      </statement>
      <feedback>
        <p>
             Correct!  
        </p>
      </feedback>
    </choice>
      <choice correct="no">
      <statement> 
               We can conjoin the conditions of sequential <c>if</c> statements with the same body that includes print statements using <c>||</c>.
      </statement>
      <feedback>
        <p>
             Not always! For example, in the previous activity, when <c>number == 28</c>, conjoining the conditions results in "Good guess" being printed only once, whereas keeping them separate causes "Good guess" to be printed twice.
        </p>
       
      </feedback>
    </choice>
   
         </choices>
 </activity> 





</section>

