<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="booleanReturnPart1" xmlns:xi="http://www.w3.org/2001/XInclude">


  <title>Rule 2) Directly return boolean expressions </title>
  <p>
 Please watch the video to learn about the second rule (directly returning boolean conditions) and then answer the following questions. Enlarge the window to view the code examples clearly. If necessary, click the settings icon in the video player and set the quality to 1080p for better clarity.
  </p>
  <figure>
    <caption>Directly return boolean expressions part 1</caption>
    <video xml:id="booleanReturn1" youtube="VsGO8hKNa5A" width="90%" margins="5% 5%" preview="booleanReturn-part1"/>
  </figure>
 
 
 
 
 <activity label="exp-booleanReturnPart1-summary">
  <statement>
    <p>
      To which of the following code blocks can we apply Rule 2?
    </p>
  </statement>

  <choices>
    <choice correct="yes">
      <statement> 
      <program>
        <input>
        <![CDATA[
       
				if (condition1) {
				   return false; 
				}
				if (condition2) {
				   return false; 
				}
				return true;
			
		
        ]]>
        </input>
      </program>
      </statement> 
      <feedback>
      <p>
      We can conjoin the if conditions together using <c>||</c> and then we have an if statement that always returns true in some senarios and false in other senarios. So, we can apply rule 2 and directly return the negation of conjoined conditions. (In the next video you will see how) 
      </p>
      </feedback>
    </choice>
    
    <choice correct="no">
      <statement> 
        <program>
        <input>
        <![CDATA[
       
				if (condition1) {
				   return false; 
				}
			
		
        ]]>
        </input>
      </program>
      </statement>
      <feedback>
      <p>
      No, the if statement only returns false.
      </p>
      </feedback>
    </choice>
    
    <choice correct="yes">
      <statement> 
       <program>
        <input>
        <![CDATA[
boolean flag = true;
if (condition1 && condition2 || condition3) {
   return flag; 
}
return false;
			
		
        ]]>
        </input>
      </program>
      </statement> 
      
      <feedback>
      <p>
      Yes. the if condition returns boolean variable true when the condition evaluates to true and returns false otherwise. So, we can apply rule 2 and directly return the if condition.  
      </p>
      </feedback>
    </choice>
  </choices>
</activity>

 
 
 
 
 
 
 
 
 
 
 
 <exercise label="exp-BooleanReturn-fillinAreEqualStrings">

    <statement> 
<p> The function <c>areStringsEqual()</c> takes two String inputs and returns a boolean. Complete the function by filling in the blanks so that when <term role="bold"> the two Strings are the same </term> it returns true. Otherwise, it returns false. You can compare String values using <c>equals()</c> method.
       </p>
    
		<program language="java" >
		  <input>
				public static boolean areStringsEqual(String str1, String str2) {   
				   return .......Blank......... ; 
				}
		  </input>
		</program>

   
      <p>
         Write your responses here:
      </p>
    </statement>
	<statement>
		<p>Blank: <var width="45"/></p>
	</statement>
	 <setup>
          	<var>
		        <condition case="sensitive" string="\s*str1\s*\.equals\s*\(\s*str2\s*\)\s*|\s*str2\s*\.equals\s*\(\s*str1\s*\)\s*">
		          <feedback>
					<p>Correct.</p>
						  </feedback>
						</condition>

						<condition case="insensitive" string=" *str1 *== *str2 *">
						  <feedback>
					<p>Try Again! To compare strings you should use equals() function instead of "==". </p>
						  </feedback>
						</condition>
						<condition case="insensitive" string=" *str1\.equal\( *str2 *\) *">
						  <feedback>
					<p>Try Again! You should use equals() instead of equal().</p>
						  </feedback>
						</condition>
						<condition string=".*">
						  <feedback>
					<p>Try again!</p>
		          </feedback>
		        </condition>
          </var>
	  
	  
	  </setup>
  </exercise>
 
 






</section>

